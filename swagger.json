{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Retailers typically refer to inventory based on SKU. This sku mapping service provides RRP with the necessary enterprise data to properly\nidentify products in our system to notify Retailers of events that occur within RRP. Endpoints are provided for uploading SKU/UPC mapping\ndata along with all associated metadata (ie. size, color, model) into the RRP System. RFID sensed inventory is read from item tags (EPCs)\nwhich then get converted to UPCs.\n\n__Known services this service depends on:__\n\n○ Context Sensing\n\n○ MongoDB\n\n\n__Known services that depend upon this service:__\n\n○ Rules\n\nThe is the schema associated to this URN urn:x-intel:context:thing:productmasterdata\n\n```json\n{\n\"type\": \"urn:x-intel:context:thing:productmasterdata\",\n\"schema\": {\n\"type\": \"object\",\n\"properties\": {\n\"data\": {\n\"type\": \"array\",\n\"items\": {\n\"type\": \"object\",\n\"properties\": {\n\"metadata\": {\n\"type\": \"object\",\n\"properties\": {\n\"dept\": {\n\"type\": \"integer\"\n},\n\"supplier\": {\n\"type\": \"integer\"\n},\n\"sup_name\": {\n\"type\": \"string\"\n},\n\"class\": {\n\"type\": \"integer\"\n},\n\"vpn\": {\n\"type\": \"string\"\n},\n\"supp_color\": {\n\"type\": \"string\"\n},\n\"primary_upc_ind\": {\n\"type\": \"string\"\n},\n\"supp_size\": {\n\"type\": \"string\"\n},\n\"upc_desc\": {\n\"type\": \"string\"\n},\n\"unit_retail\": {\n\"type\": \"number\"\n}\n}\n},\n\"dailyTurn\":{\n\"type\":[\"number\"],\n\"minimum\": 0,\n\"maximum\": 1\n},\n\"becomingReadable\":{\n\"type\":[\"number\"],\n\"minimum\": 0,\n\"maximum\": 1\n},\n\"exitError\":{\n\"type\":[\"number\"],\n\"minimum\": 0,\n\"maximum\": 1\n},\n\"beingRead\":{\n\"type\":[\"number\"],\n\"minimum\": 0,\n\"maximum\": 1\n},\n\"sku\": {\n\"type\": \"string\"\n},\n\"productId\": {\n\"type\": \"string\"\n}\n},\n\"required\": [\"sku\", \"productId\"]\n}\n}\n}\n},\n\"descriptions\": {\n\"en\": {\n\"documentation\": \"Reads the product masterdata from a csv file and publishes the data to the broker.\",\n\"short_name\": \"Product Master Data\"\n}\n}\n}\n```\n## __Example configuration file json__\n```json\n{\n\u0026#9\u0026#9\"serviceName\": \"RRP - mapping-sku-service\",\n\u0026#9\u0026#9\"databaseName\": \"mapping\",\n\u0026#9\u0026#9\"loggingLevel\": \"debug\",\n\u0026#9\u0026#9\"secureMode\" : false,\n\u0026#9\u0026#9\"skipCertVerify\" : false,\n\u0026#9\u0026#9\"telemetryEndpoint\": \"http://166.130.9.122:8000\",\n\u0026#9\u0026#9\"telemetryDataStoreName\" : \"Store105\",\n\u0026#9\u0026#9\"port\": \"8080\"\n\u0026#9\u0026#9\"responseLimit\": 10000,\n}\n```\n## __Example environment variables in compose File__:\n```json\n{\n\u0026#9\u0026#9contextSdk: \"127.0.0.1:8888\"\n\u0026#9\u0026#9connectionString: \"mongodb://127.0.0.1:27017\"\n}\n```\n###__Configuration file values__\n+ `serviceName`  \t\t\t\t - Runtime name of the service\n\n+ `databaseName`  \t\t\t\t - Name of database\n\n+ `loggingLevel`  \t\t\t\t - Logging level to use: \"info\" (default) or \"debug\" (verbose)\n\n+ `secureMode`  \t\t\t\t\t - Boolean flag indicating if using secure connection to the Context Brokers\n\n+ `skipCertVerify`  \t\t\t\t - Boolean flag indicating if secure connection to the Context Brokers should skip certificate validation\n\n+ `telemetryEndpoint`  \t\t\t\t - URL of the telemetry service receiving the metrics from the service\n\n+ `telemetryDataStoreName`  \t\t - Name of the data store in the telemetry service to store the metrics\n\n+ `port`  \t\t\t\t\t\t - Port to run the service/s HTTP Server on\n\n+ `responseLimit`  \t\t\t\t - Default limit to what can be returned in a GET call - because of this, client must define their own top-skip functionality\n\n###__Compose file environment variable values__\n\n+ `contextSdk`  \t\t\t- Host and port number for the Context Broker\n\n+ `connectionString`  \t- Host and port number for the Database connection\n\n## __Known services this service depends on:__\n+ context-broker\nThese are the topics that this service subscribes to from the Context Sensing SDK Websocket bus. To learn more about the Context Sensing SDK, please visit http://contextsensing.intel.com/\n```\n\u0026#9prodDataUrn        = \"urn:x-intel:context:thing:productmasterdata\"\n\n```\n+ rrp-mongo\n\n## __Known services that depend upon this service:__\n+ item-finder\n+ rules-service\n\nCopyright 2018 Intel® Corporation, All rights reserved.",
    "title": "SKU Mapping API.",
    "contact": {
      "name": "RRP",
      "email": "rrp@intel.com"
    },
    "version": "0.0.1"
  },
  "host": "mapping-service:8080",
  "basePath": "/",
  "paths": {
    "/": {
      "get": {
        "description": "Endpoint that is used to determine if the application is ready to take web requests",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "default"
        ],
        "summary": "Healthcheck Endpoint",
        "operationId": "Healthcheck",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/productid/{productid}": {
      "get": {
        "description": "This API call is used to get the metadata for a upc.\u003cbr\u003e\u003cbr\u003e\n\nExample query:\n\n\u003cblockquote\u003e/upc/12345678978345\u003c/blockquote\u003e \u003cbr\u003e\u003cbr\u003e\n\n\nExample Result: \u003cbr\u003e\u003cbr\u003e\n```json\n{\n\"metadata\": {\n\"color\": \"blue\",\n\"size\": \"XS\"\n},\n\"upc\": \"12345678978345\"\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "productid"
        ],
        "summary": "Retrieves SKU Data",
        "operationId": "productids",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProductID",
            "description": "a product id",
            "name": "productId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "resultsResponse",
            "schema": {
              "$ref": "#/definitions/resultsResponse"
            }
          },
          "400": {
            "$ref": "#/responses/schemaValidation"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/skus": {
      "get": {
        "description": "This API call is used to retrieve a list of SKU items.\n\n\u003cblockquote\u003e• \u003cb\u003eSearch by sku\u003c/b\u003e: To search by sku, you would use the filter query parameter like so: /sku?$filter=(sku eq 'MS122-32')\u003c/blockquote\u003e\n\n\u003cblockquote\u003e• \u003cb\u003eSearch by name\u003c/b\u003e: To search by name, you would use the filter query parameter like so: /location?$filter=(name eq 'mens khaki slacks')\u003c/blockquote\u003e\n\n\n`/skus?$top=10\u0026$select=sku` - Useful for paging data. Grab the top 10 records and only pull back the sku field\n\n`/skus?$count` - Tell me how many records are in the database\n\n`/skus?$filter=(sku eq '12345678') and (upclist.metadata.color eq 'red')` - This filters on particular sku and UPCs that are classified as \"Red\"\n\n`/skus?$orderby=sku desc` - Give me back all skus in descending order by sku\n\n`/skus?$filter=startswith(sku,'m')` - Give me all skus that begin with the letter 'm'\n\n`/skus?$count\u0026$filter=(sku eq '12345678')` - Give me the count of items with the SKU `12345678``\n\n`/skus?$inlinecount=allpages\u0026$filter=(sku eq '12345678')` - Give me all items with the SKU `12345678` and include how many there are\n\n\n\nExample Result:\u003cbr\u003e\u003cbr\u003e\n```json\n{\n\"results\": [\n{\n\"sku\": \"12345679\",\n\"upclist\": [\n{\n\"metadata\": {\n\"color\": \"blue\",\n\"size\": \"XS\"\n},\n\"upc\": \"123456789783\"\n},\n{\n\"metadata\": {\n\"color\": \"red\",\n\"size\": \"M\"\n},\n\"upc\": \"123456789784\"\n}\n]\n}\n]\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "skus"
        ],
        "summary": "Retrieves SKU Data",
        "operationId": "getSkus",
        "responses": {
          "200": {
            "description": "resultsResponse",
            "schema": {
              "$ref": "#/definitions/resultsResponse"
            }
          },
          "400": {
            "$ref": "#/responses/schemaValidation"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "post": {
        "description": "This API call is used to upload a list of SKU items into Responsive Retail.\u003cbr\u003e\nThe SKU data includes:\n\n\u003cblockquote\u003e• \u003cb\u003eSKU\u003c/b\u003e: The SKU number, a unique identifier for the SKU.\u003c/blockquote\u003e\n\n\u003cblockquote\u003e• \u003cb\u003eUPC List\u003c/b\u003e: A list (array) of UPCs that are included in the SKU.\u003c/blockquote\u003e\n\nExpected formatting of JSON input (as an example):\u003cbr\u003e\u003cbr\u003e\n\n```json\n{\n\"data\":[{\n\"sku\" : \"MS122-32\",\n\"productList\" : [\n{ \"upc\": \"00888446671444\", \"metadata\": {\"color\":\"blue\"} },\n{ \"upc\": \"889319762751\", \"metadata\": {\"size\":\"small\"} }\n]\n},\n{\n\"sku\" : \"MS122-34\",\n\"upcList\" : [\n{\"upc\": \"90388987132758\", \"metadata\": {\"name\":\"pants\"} }\n]\n}]\n}\n```\n\u003cbr\u003e\nEach SKU item is treated individually; it succeeds or fails independent of the other SKUs.\nCheck the returned results to determine the success or failure of each SKU.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "skus"
        ],
        "summary": "Loads SKU Data",
        "operationId": "postSkus",
        "parameters": [
          {
            "x-go-name": "Data",
            "name": "data",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProdData"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/Created"
          },
          "400": {
            "$ref": "#/responses/schemaValidation"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/skus/{sku}": {
      "delete": {
        "description": "This API call is used to delete a sku object with its upcList\u003cbr\u003e\u003cbr\u003e\n\nExample query:\n\n\u003cblockquote\u003e/skus/MS122-32\u003c/blockquote\u003e \u003cbr\u003e\u003cbr\u003e",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "skus"
        ],
        "summary": "Deletes SKU data",
        "operationId": "deleteSkus",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Sku",
            "description": "valid sku",
            "name": "sku",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "resultsResponse",
            "schema": {
              "$ref": "#/definitions/resultsResponse"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    }
  },
  "definitions": {
    "DB": {
      "description": "DB is a collection of support for different DB technologies. Currently\nonly MongoDB has been implemented. We want to be able to access the raw\ndatabase support for the given DB so an interface does not work. Each\ndatabase is too different.",
      "type": "object",
      "x-go-package": "github.impcloud.net/Responsive-Retail-Inventory/mapping-sku-service/vendor/github.impcloud.net/Responsive-Retail-Core/mongodb"
    },
    "ErrReport": {
      "description": "ErrReport is used to wrap schema validation errors int json object",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "errortype": {
          "type": "string",
          "x-go-name": "ErrorType"
        },
        "field": {
          "type": "string",
          "x-go-name": "Field"
        },
        "value": {
          "type": "object",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.impcloud.net/Responsive-Retail-Inventory/mapping-sku-service/app/routes/handlers"
    },
    "ErrorList": {
      "description": "ErrorList provides a collection of errors for processing",
      "type": "object",
      "properties": {
        "errors": {
          "description": "The error list\nin: body",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrReport"
          },
          "x-go-name": "Errors"
        }
      },
      "x-go-package": "github.impcloud.net/Responsive-Retail-Inventory/mapping-sku-service/app/routes/handlers"
    },
    "Mapping": {
      "type": "object",
      "title": "Mapping represents the User API method handler set.",
      "properties": {
        "MasterDB": {
          "$ref": "#/definitions/DB"
        },
        "Size": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "github.impcloud.net/Responsive-Retail-Inventory/mapping-sku-service/app/routes/handlers"
    },
    "ProdData": {
      "description": "ProdData represents the product data schema in the database",
      "type": "object",
      "properties": {
        "productList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductMetadata"
          },
          "x-go-name": "ProductList"
        },
        "sku": {
          "type": "string",
          "x-go-name": "Sku"
        }
      },
      "x-go-package": "github.impcloud.net/Responsive-Retail-Inventory/mapping-sku-service/app/mapping"
    },
    "ProductMetadata": {
      "description": "UpcMetadata represents the UpcList schema attribute in the database",
      "type": "object",
      "properties": {
        "becomingReadable": {
          "type": "number",
          "format": "double",
          "x-go-name": "BecomingReadable"
        },
        "beingRead": {
          "type": "number",
          "format": "double",
          "x-go-name": "BeingRead"
        },
        "dailyTurn": {
          "type": "number",
          "format": "double",
          "x-go-name": "DailyTurn"
        },
        "exitError": {
          "type": "number",
          "format": "double",
          "x-go-name": "ExitError"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Metadata"
        },
        "productId": {
          "type": "string",
          "x-go-name": "ProductID"
        }
      },
      "x-go-package": "github.impcloud.net/Responsive-Retail-Inventory/mapping-sku-service/app/mapping"
    },
    "resultsResponse": {
      "description": "Response wraps results, inlinecount, and extra fields in a json object",
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "results": {
          "description": "Array containing results of query",
          "type": "object",
          "x-go-name": "Results"
        }
      },
      "x-go-name": "Response",
      "x-go-package": "github.impcloud.net/Responsive-Retail-Inventory/mapping-sku-service/app/routes/handlers"
    }
  },
  "responses": {
    "Created": {
      "description": "Created"
    },
    "NotFound": {
      "description": "NotFound"
    },
    "internalError": {
      "description": "JSONError is the response for errors that occur within the API."
    },
    "schemaValidation": {
      "description": "ErrorList provides a collection of errors for processing",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ErrReport"
        }
      }
    }
  }
}